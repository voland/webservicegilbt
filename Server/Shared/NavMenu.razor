@using WebServiceGilBT.Data
@using System.Text.Json
@using WebServiceGilBT.Services
@inject Blazored.SessionStorage.ISessionStorageService _sessionStorageService
@inject UserMySQLService us;
@implements IDisposable
@inject Lang lng

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">WebServiceGilBT</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/index" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> @lng.screenList
            </NavLink>
            @if (loggeduser.UserType == eUserType.admin) {
                <NavLink class="nav-link" href="/users" Match="NavLinkMatch.All">
                    <span class="oi oi-people" aria-hidden="true"></span> @lng.usersList
                </NavLink>
                <NavLink class="nav-link" href="/gminy" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> @lng.comunes
                </NavLink>
            }
        </li>
    </ul>
</div>

@code{
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu() {
        collapseNavMenu = !collapseNavMenu;
    }

    protected async Task<User> GetLoggedUser() {
        string serializedUser = await _sessionStorageService.GetItemAsync<string>("loggedUser");
        User u = null;
        if (serializedUser != null) {
            u = JsonSerializer.Deserialize<User>(serializedUser);
            u.language = (Languages)(await us.GetUserLangAsync(u.UserId));
        }
        if (u == null) {
            u = new User();
        }
        return u;
    }

    private User _u = null;
    public User loggeduser {
        set {
            _u = value;
            OnLoggedUser.InvokeAsync(value);
        }
        get {
            if (_u == null) {
                _u = new User();
                _u.EmailAddress = "Unknown_user";
            }
            return _u;
        }
    }

    [Parameter] public EventCallback<User> OnLoggedUser { get; set; }

    protected async override Task OnInitializedAsync() {
        loggeduser = await GetLoggedUser();
    }

    protected override void OnInitialized() {
        @* lng.LangChanged += StateHasChanged; *@
    }

    public void Dispose() {
        @* lng.LangChanged -= StateHasChanged; *@
    }

}
