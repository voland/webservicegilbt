@using WebServiceGilBT.Services;
@using WebServiceGilBT.Data;
@inject UserMySQLService usrService;

    <div style="background-color:azure; border:solid ; border-width:1px ; border-radius:10px ; width:50% ; margin:10px">
        @if (pokaUzytkownikow && loggeduser.UserType == eUserType.admin) {
            @foreach (PresTemplate tm in listaUsersNames) {
                <label style="margin:15px">@Lang.users:</label><br />
                <label @onclick="(()=>wybranoUsera(tm.UserAuthorId))" class="hintLabel" style="margin:3px">
                    @tm.authorName
                </label> <br />
            }
			} else {
            @if (loggeduser.UserType == eUserType.admin) {
                <label @onclick="usersListClicked" class="hintLabel" style="margin:15px">@Lang.users</label><br />
            }

            @foreach (PresTemplate tm in listaTemplatesOfUser) {
                <label style="margin:3px ; font-size:10px">
                    @string.Format("{0} , {1}x{2} {3} , {4}", tm.TemplateName, tm.Width, tm.Height, tm.ScreenType, tm.CreateDate)
                </label>
                <label  @onclick="(()=>wybranoTemplate(tm))" class="hintLabel" style="font-size:12px ; font-weight:bold ; margin-left:20px">@Lang.load</label>
                <label  @onclick="(()=>usunTemplate(tm))" class="hintLabel" style="font-size:12px ; font-weight:bold ; margin-left:15px">@Lang.delete</label><br />
            }
        }
    </div>

@code {
    [Parameter] public EventCallback<PresTemplate> templateSelectedEvent { get; set; }
    [Parameter] public User loggeduser { get; set; }
    [Parameter] public Screen ekran { get; set; }

    bool pokaUzytkownikow = true;

    UniversalMysqlService<PresTemplate> presTemplateService;
    List<PresTemplate> listaTemplatow;
    List<User> listauzytkownikow;
    List<PresTemplate> listaUsersNames = new List<PresTemplate>();
    List<PresTemplate> listaTemplatesOfUser;

    protected override async Task OnInitializedAsync() {
        presTemplateService = new UniversalMysqlService<PresTemplate>(new SqlDataAccess(null), PresTemplate.tableName, nameof(PresTemplate.Id));
        listaTemplatow = await presTemplateService.GetAllRecordsAsync();
        listaTemplatow = listaTemplatow.Where(x => x.ScreenType == ekran.screen_type).ToList();
        listauzytkownikow = await usrService.GetUserListAsync();
        makeUserNamesList();
        if (loggeduser.UserType != eUserType.admin) {
            wybranoUsera(loggeduser.UserId);
        }
        //return base.OnInitializedAsync();
    }

    void makeUserNamesList() {
        int i = 1;
        foreach (PresTemplate pt in listaTemplatow) {
            User u = listauzytkownikow.FirstOrDefault(x => x.UserId == pt.UserAuthorId);
            if (u != null) {
                pt.authorName = u.EmailAddress;
            } else {
                pt.authorName = "unknown user " + i;
                i++;
            }
            if (!listaUsersNames.Any(x => x.UserAuthorId == pt.UserAuthorId)) {
                listaUsersNames.Add(pt);
            }
        }
    }

    void wybranoUsera(int userId) {
        listaTemplatesOfUser = listaTemplatow.Where(x => x.UserAuthorId == userId).ToList();
        pokaUzytkownikow = false;
    }

    void usersListClicked() {
        pokaUzytkownikow = true;
    }

    void wybranoTemplate(PresTemplate temp) {
        templateSelectedEvent.InvokeAsync(temp);
    }

    async Task usunTemplate(PresTemplate temp) {
        await presTemplateService.DeleteRecordAsync(temp);
        listaTemplatesOfUser.Remove(temp);
        listaTemplatow.Remove(temp);
    }
}
